// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeline.proto

#ifndef PROTOBUF_timeline_2eproto_INCLUDED
#define PROTOBUF_timeline_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_timeline_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsaskImpl();
void InitDefaultsask();
void InitDefaultsanswerImpl();
void InitDefaultsanswer();
inline void InitDefaults() {
  InitDefaultsask();
  InitDefaultsanswer();
}
}  // namespace protobuf_timeline_2eproto
namespace timeline {
class answer;
class answerDefaultTypeInternal;
extern answerDefaultTypeInternal _answer_default_instance_;
class ask;
class askDefaultTypeInternal;
extern askDefaultTypeInternal _ask_default_instance_;
}  // namespace timeline
namespace google {
namespace protobuf {
template<> ::timeline::answer* Arena::Create< ::timeline::answer>(Arena*);
template<> ::timeline::ask* Arena::Create< ::timeline::ask>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace timeline {

// ===================================================================

class ask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.ask) */ {
 public:
  ask();
  virtual ~ask();

  ask(const ask& from);

  inline ask& operator=(const ask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ask(ask&& from) noexcept
    : ask() {
    *this = ::std::move(from);
  }

  inline ask& operator=(ask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ask* internal_default_instance() {
    return reinterpret_cast<const ask*>(
               &_ask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ask* other);
  friend void swap(ask& a, ask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ask* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ask>(NULL);
  }

  ask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ask& from);
  void MergeFrom(const ask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 needtime = 1;
  void clear_needtime();
  static const int kNeedtimeFieldNumber = 1;
  ::google::protobuf::int32 needtime() const;
  void set_needtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.ask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 needtime_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsaskImpl();
};
// -------------------------------------------------------------------

class answer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.answer) */ {
 public:
  answer();
  virtual ~answer();

  answer(const answer& from);

  inline answer& operator=(const answer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  answer(answer&& from) noexcept
    : answer() {
    *this = ::std::move(from);
  }

  inline answer& operator=(answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const answer* internal_default_instance() {
    return reinterpret_cast<const answer*>(
               &_answer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(answer* other);
  friend void swap(answer& a, answer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline answer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<answer>(NULL);
  }

  answer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<answer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const answer& from);
  void MergeFrom(const answer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string timeis = 1;
  void clear_timeis();
  static const int kTimeisFieldNumber = 1;
  const ::std::string& timeis() const;
  void set_timeis(const ::std::string& value);
  #if LANG_CXX11
  void set_timeis(::std::string&& value);
  #endif
  void set_timeis(const char* value);
  void set_timeis(const char* value, size_t size);
  ::std::string* mutable_timeis();
  ::std::string* release_timeis();
  void set_allocated_timeis(::std::string* timeis);

  // @@protoc_insertion_point(class_scope:timeline.answer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr timeis_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsanswerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ask

// int32 needtime = 1;
inline void ask::clear_needtime() {
  needtime_ = 0;
}
inline ::google::protobuf::int32 ask::needtime() const {
  // @@protoc_insertion_point(field_get:timeline.ask.needtime)
  return needtime_;
}
inline void ask::set_needtime(::google::protobuf::int32 value) {
  
  needtime_ = value;
  // @@protoc_insertion_point(field_set:timeline.ask.needtime)
}

// -------------------------------------------------------------------

// answer

// string timeis = 1;
inline void answer::clear_timeis() {
  timeis_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& answer::timeis() const {
  // @@protoc_insertion_point(field_get:timeline.answer.timeis)
  return timeis_.GetNoArena();
}
inline void answer::set_timeis(const ::std::string& value) {
  
  timeis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.answer.timeis)
}
#if LANG_CXX11
inline void answer::set_timeis(::std::string&& value) {
  
  timeis_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.answer.timeis)
}
#endif
inline void answer::set_timeis(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timeis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.answer.timeis)
}
inline void answer::set_timeis(const char* value, size_t size) {
  
  timeis_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.answer.timeis)
}
inline ::std::string* answer::mutable_timeis() {
  
  // @@protoc_insertion_point(field_mutable:timeline.answer.timeis)
  return timeis_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* answer::release_timeis() {
  // @@protoc_insertion_point(field_release:timeline.answer.timeis)
  
  return timeis_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void answer::set_allocated_timeis(::std::string* timeis) {
  if (timeis != NULL) {
    
  } else {
    
  }
  timeis_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeis);
  // @@protoc_insertion_point(field_set_allocated:timeline.answer.timeis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace timeline

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_timeline_2eproto_INCLUDED
