// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: timeline.proto

#include "timeline.pb.h"
#include "timeline.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace timeline {

static const char* gettime_method_names[] = {
  "/timeline.gettime/obmen",
};

std::unique_ptr< gettime::Stub> gettime::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< gettime::Stub> stub(new gettime::Stub(channel));
  return stub;
}

gettime::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_obmen_(gettime_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::timeline::answer>* gettime::Stub::obmenRaw(::grpc::ClientContext* context, const ::timeline::ask& request) {
  return ::grpc::internal::ClientReaderFactory< ::timeline::answer>::Create(channel_.get(), rpcmethod_obmen_, context, request);
}

::grpc::ClientAsyncReader< ::timeline::answer>* gettime::Stub::AsyncobmenRaw(::grpc::ClientContext* context, const ::timeline::ask& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::timeline::answer>::Create(channel_.get(), cq, rpcmethod_obmen_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::timeline::answer>* gettime::Stub::PrepareAsyncobmenRaw(::grpc::ClientContext* context, const ::timeline::ask& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::timeline::answer>::Create(channel_.get(), cq, rpcmethod_obmen_, context, request, false, nullptr);
}

gettime::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gettime_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< gettime::Service, ::timeline::ask, ::timeline::answer>(
          std::mem_fn(&gettime::Service::obmen), this)));
}

gettime::Service::~Service() {
}

::grpc::Status gettime::Service::obmen(::grpc::ServerContext* context, const ::timeline::ask* request, ::grpc::ServerWriter< ::timeline::answer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace timeline

